name: Windows RDP via Ngrok - 24/7 Continuous

on: 
  push:
    branches: [ main, master ]
  workflow_dispatch:
  schedule:
    - cron: '0 */5 * * *'  # Run every 5 hours to ensure continuous operation

jobs:
  rdp-setup:
    runs-on: windows-latest
    timeout-minutes: 300  # 5 hours per session
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download and extract Ngrok
      run: |
        Write-Host "üöÄ Downloading Ngrok..."
        Invoke-WebRequest "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-stable-windows-amd64.zip" -OutFile ngrok.zip
        Write-Host "üì¶ Extracting Ngrok..."
        Expand-Archive ngrok.zip -DestinationPath "$env:USERPROFILE" -Force
        Remove-Item ngrok.zip
        Copy-Item "$env:USERPROFILE\ngrok.exe" "$env:GITHUB_WORKSPACE" -Force
        Write-Host "‚úÖ Ngrok ready!"

    - name: Authenticate Ngrok
      run: |
        Write-Host "üîê Authenticating Ngrok..."
        $ErrorActionPreference = "Stop"
        .\ngrok.exe authtoken "${{ secrets.NGROK_AUTH_TOKEN }}"
        Write-Host "‚úÖ Authentication successful!"

    - name: Enable RDP and Firewall
      run: |
        Write-Host "üîß Configuring RDP and firewall..."
        # Enable RDP
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" -Name "UserAuthentication" -Value 0
        
        # Configure firewall
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        New-NetFirewallRule -DisplayName "Allow RDP via Ngrok" -Direction Inbound -Action Allow -Protocol TCP -LocalPort 3389 -Profile Any
        
        Write-Host "‚úÖ RDP and firewall configured!"

    - name: Create Admin User
      run: |
        Write-Host "üë§ Setting up admin user..."
        $userExists = Get-LocalUser -Name "kamel007" -ErrorAction SilentlyContinue
        if (-not $userExists) {
          net user kamel007 Kamel@123 /add
          net localgroup administrators kamel007 /add
          Write-Host "‚úÖ User kamel007 created!"
        } else {
          Write-Host "‚ÑπÔ∏è User kamel007 already exists"
        }

    - name: Start Ngrok Tunnel (Continuous Mode)
      run: |
        Write-Host "üåê Starting Ngrok tunnel..."
        
        # Start ngrok in background
        Start-Process -FilePath "$($pwd)\ngrok.exe" -ArgumentList 'tcp 3389 --log=stdout' -NoNewWindow -RedirectStandardOutput "ngrok.log"
        
        # Wait for tunnel to be ready
        $tunnelUrl = $null
        $timeout = 20  # 20 seconds timeout
        
        Write-Host "‚è≥ Waiting for tunnel..."
        
        while ($timeout -gt 0 -and -not $tunnelUrl) {
          Start-Sleep -Seconds 1
          $timeout -= 1
          
          try {
            $response = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -ErrorAction Stop
            if ($response.tunnels -and $response.tunnels.Count -gt 0) {
              $tunnelUrl = $response.tunnels[0].public_url -replace "tcp://", ""
              Write-Host "‚úÖ Tunnel ready: $tunnelUrl"
            }
          } catch {
            $logContent = Get-Content "ngrok.log" -ErrorAction SilentlyContinue
            $tunnelUrl = $logContent | Select-String -Pattern "tcp://([a-zA-Z0-9\.\-]+:\d+)" | ForEach-Object { $_.Matches.Groups[1].Value }
            if ($tunnelUrl) {
              Write-Host "‚úÖ Tunnel ready (log): $tunnelUrl"
            }
          }
          
          if ($timeout % 5 -eq 0) {
            Write-Host "‚è∞ Waiting... ($timeout seconds left)"
          }
        }

        if (-not $tunnelUrl) {
          Write-Output '::error::‚ùå Failed to establish tunnel'
          exit 1
        }

        # Display connection details
        Write-Output "============================================"
        Write-Output "||     üéØ RDP CONNECTION ACTIVE         ||"
        Write-Output "============================================"
        Write-Output "üåê Address: $tunnelUrl"
        Write-Output "üë§ Username: kamel007"
        Write-Output "üîë Password: Kamel@123"
        Write-Output "‚è∞ Session: 5 hours (auto-restart)"
        Write-Output "üîÑ Status: Continuous operation"
        Write-Output "--------------------------------------------"
        Write-Output "üì± Instructions:"
        Write-Output "1. Win + R ‚Üí mstsc ‚Üí Enter"
        Write-Output "2. Connect to: $tunnelUrl"
        Write-Output "3. Use credentials above"
        Write-Output "4. Session auto-restarts every 5 hours"
        Write-Output "============================================"
        
        # Keep the job running with health checks
        Write-Host "üîÑ Tunnel active. Monitoring health..."
        $startTime = Get-Date
        $maxRuntime = [TimeSpan]::FromMinutes(290)  # 290 minutes to be safe
        
        while ((Get-Date) - $startTime -lt $maxRuntime) {
          Start-Sleep -Seconds 30
          $elapsed = (Get-Date) - $startTime
          
          # Health check every 2 minutes
          if ($elapsed.TotalSeconds % 120 -lt 30) {
            try {
              $health = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -ErrorAction Stop
              if ($health.tunnels -and $health.tunnels.Count -gt 0) {
                Write-Host "‚úÖ Health check: Tunnel active for $($elapsed.Hours)h $($elapsed.Minutes)m"
              } else {
                Write-Host "‚ö†Ô∏è Health check: Tunnel may be down, restarting..."
                break
              }
            } catch {
              Write-Host "‚ö†Ô∏è Health check failed, restarting..."
              break
            }
          }
        }
        
        Write-Host "üîÑ Session ending, will restart automatically..."

    - name: Cleanup and Restart
      if: always()
      run: |
        Write-Host "üßπ Cleaning up current session..."
        Stop-Process -Name "ngrok" -Force -ErrorAction SilentlyContinue
        Get-Process -Name "ngrok" -ErrorAction SilentlyContinue | Stop-Process -Force
        
        Write-Output "============================================"
        Write-Output "||     üîÑ SESSION COMPLETED             ||"
        Write-Output "============================================"
        Write-Output "‚úÖ Current session ended successfully"
        Write-Output "üîÑ New session will start automatically"
        Write-Output "‚è∞ Next restart in 5 hours"
        Write-Output "üåê RDP will be available 24/7"
        Write-Output "============================================"

    - name: Auto-Restart Notification
      if: always()
      run: |
        Write-Host "üöÄ Preparing for auto-restart..."
        Write-Output "::notice::RDP session completed. Auto-restarting in 5 hours for 24/7 operation."
